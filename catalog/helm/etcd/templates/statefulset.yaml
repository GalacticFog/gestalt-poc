apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: "{{ template "etcd.fullname" . }}"
  labels:
    app: {{ template "etcd.name" . }}
    chart: {{ template "etcd.chart" . }}
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  selector:
    matchLabels:
      app: {{ template "etcd.name" . }}
      release: "{{ .Release.Name }}"
  serviceName: {{ template "etcd.fullname" . }}-headless
  podManagementPolicy: {{ .Values.statefulset.podManagementPolicy }}
  replicas: {{ .Values.statefulset.replicaCount }}
  updateStrategy:
    type: {{ .Values.statefulset.updateStratey }}
    {{- if .Values.statefulset.rollingUpdatePartition }}
    rollingUpdate:
      partition: {{ .Values.statefulset.rollingUpdatePartition }}
    {{- end }}
  template:
    metadata:
      name: "{{ template "etcd.fullname" . }}"
      labels:
        app: {{ template "etcd.name" . }}
        chart: {{ template "etcd.chart" . }}
        release: {{ .Release.Name | quote }}
        heritage: {{ .Release.Service | quote }}
{{- if or .Values.podAnnotations .Values.metrics.enabled }}
      annotations:
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
{{- if .Values.metrics.podAnnotations }}
{{ toYaml .Values.metrics.podAnnotations | indent 8 }}
{{- end }}
{{- end }}
    spec:
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
      {{- end}}
      {{- end }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      containers:
      # Variables to populate static cluster
      {{- $replicaCount := int .Values.statefulset.replicaCount }}
      {{- $clientPort := int .Values.service.port }}
      {{- $peerPort := int .Values.service.peerPort }}
      {{- $etcdFullname := include "etcd.fullname" . }}
      {{- $releaseNamespace := .Release.Namespace }}
      {{- $etcdHeadlessServiceName := printf "%s-%s" $etcdFullname "headless" }}
      {{- $etcdPeerProtocol := include "etcd.peerProtocol" . }}
      {{- $etcdClientProtocol := include "etcd.clientProtocol" . }}
      - name: "{{ template "etcd.fullname" . }}"
        image: "{{ template "etcd.image" . }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        command:
         - bash
         - -ec
         - |
            HOSTNAME=$(hostname -s)
            ID=${HOSTNAME:(-1)}
            echo "==> The ID of the host is $ID"
            DATA_DIR={{ template "etcd.dataDir" . }}

            AUTH_OPTIONS="{{ template "etcd.authOptions" . }}"

            ## Store member id for later member replacement
            store_member_id() {
                while ! etcdctl ${AUTH_OPTIONS} member list &>/dev/null; do sleep 1; done
                etcdctl ${AUTH_OPTIONS} member list | grep `hostname -s` | awk '{ print $1}' | awk -F ":" '{ print $1}' > ${DATA_DIR}/member_id
                exit 0
            }

            ## Create data dir if not exists
            if [ ! -d '${DATA_DIR}' ]; then
              echo "==> Creating data dir..."
              mkdir -p ${DATA_DIR}
            fi

            ## Re-joining failed node
            if [ -d '${DATA_DIR}/member/' ]; then
              echo "==> Data exists. Re-joining etcd member"
              member_id=$(cat ${DATA_DIR}/member_id)

              echo "==> Updating member in existing cluster."
              export ETCDCTL_ENDPOINTS="{{ $etcdClientProtocol }}://{{ $etcdFullname }}-0.{{ $etcdHeadlessServiceName }}.{{ .Release.Namespace }}.svc.cluster.local:{{ $clientPort }}"
              etcdctl ${AUTH_OPTIONS} member update ${member_id} {{ $etcdPeerProtocol }}://`hostname -s`.{{ $etcdHeadlessServiceName }}.{{ .Release.Namespace }}.svc.cluster.local:{{ $peerPort }}

            ## Adding new member to the cluster
            elif [ "${ID}" -ge {{ $replicaCount }} ]; then
              echo "==> Adding member to existing cluster."
              export ETCDCTL_ENDPOINTS="{{ $etcdClientProtocol }}://{{ $etcdFullname }}-0.{{ $etcdHeadlessServiceName }}.{{ .Release.Namespace }}.svc.cluster.local:{{ $clientPort }}"

              echo "==> Adding new member"
              etcdctl ${AUTH_OPTIONS} member add `hostname -s` {{ $etcdPeerProtocol }}://`hostname -s`.{{ $etcdHeadlessServiceName }}.{{ .Release.Namespace }}.svc.cluster.local:{{ $peerPort }} | grep "^ETCD_" > ${DATA_DIR}/new_member_envs
              sed -ie 's/^/export /' /bitnami/etcd/data/new_member_envs

              echo "==> Loading env vars of existing cluster"
              source ${DATA_DIR}/new_member_envs

              store_member_id &

            ## Setting up new cluster
            else
              echo "==> There is no data at all. Creating new cluster"
              export ETCDCTL_ENDPOINTS="{{ $etcdClientProtocol }}://{{ $etcdFullname }}-0.{{ $etcdHeadlessServiceName }}.{{ .Release.Namespace }}.svc.cluster.local:{{ $clientPort }}"

              store_member_id &

              if [ ! -z "$ETCD_ROOT_PASSWORD" ] && [ `hostname -s` == '{{ $etcdFullname }}-0' ]; then
                echo "==> Configuring RBAC authentication!"
                etcd > /dev/null 2>&1 &
                ETCD_PID=$!
                sleep 5
                echo "$ETCD_ROOT_PASSWORD" | etcdctl ${AUTH_OPTIONS} user add root
                etcdctl ${AUTH_OPTIONS} auth enable
                etcdctl ${AUTH_OPTIONS} role revoke guest -path '/*' --readwrite
                kill $ETCD_PID
                sleep 5
              fi
            fi

            {{- if .Values.useConfigmap }}
            exec /opt/bitnami/etcd/bin/etcd --config-file /opt/bitnami/etcd/conf/etcd.conf.yml
            {{ else }}
            exec /opt/bitnami/etcd/bin/etcd
            {{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        env:
        {{- if .Values.image.debug }}
        - name: BASH_DEBUG
          value: "1"
        - name: NAMI_DEBUG
          value: "1"
        - name: NAMI_LOG_LEVEL
          value: "trace8"
        {{- end }}
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name

        ## Basic configuration
        - name: ETCD_NAME
          value: "$(MY_POD_NAME)"
        - name: ETCD_DATA_DIR
          value: {{ template "etcd.dataDir" . }}
        - name: ETCD_ADVERTISE_CLIENT_URLS
          value: "{{ $etcdClientProtocol }}://$(MY_POD_NAME).{{ $etcdHeadlessServiceName }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.port }}"
        - name: ETCD_LISTEN_CLIENT_URLS
          value: "{{ $etcdClientProtocol }}://0.0.0.0:{{ .Values.service.port }}"
        - name: ETCD_INITIAL_ADVERTISE_PEER_URLS
          value: "{{ $etcdPeerProtocol }}://$(MY_POD_NAME).{{ $etcdHeadlessServiceName }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.peerPort }}"
        - name: ETCD_LISTEN_PEER_URLS
          value: "{{ $etcdPeerProtocol }}://0.0.0.0:{{ .Values.service.peerPort }}"

        ## Clustering configuration
        {{- if gt $replicaCount 1 }}
        - name: ETCD_INITIAL_CLUSTER_TOKEN
          value: "etcd-cluster-k8s"
        - name: ETCD_INITIAL_CLUSTER_STATE
          value: "new"
        - name: ETCD_INITIAL_CLUSTER
          value: {{range $i, $e := until $replicaCount }}{{ $etcdFullname }}-{{ $e }}={{ $etcdPeerProtocol }}://{{ $etcdFullname }}-{{ $e }}.{{ $etcdHeadlessServiceName }}.{{ $releaseNamespace }}.svc.cluster.local:{{ $peerPort }},{{ end }}
        {{- end }}

        ## RBAC authentication
        - name: ALLOW_NONE_AUTHENTICATION
          {{- if .Values.auth.rbac.enabled }}
          value: "no"
          {{- else if .Values.allowNoneAuthentication }}
          value: "yes"
          {{- else }}
          value: "no"
          {{- end }}
        {{- if .Values.auth.rbac.enabled }}
        - name: ETCD_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.auth.existingSecret }}{{ .Values.auth.existingSecret }}{{ else }}{{ template "etcd.fullname" . }}{{ end }}
              key: etcd-root-password
        {{- end }}

        ## Client-to-server communication
        {{- if and .Values.auth.client.secureTransport .Values.auth.client.useAutoTLS }}
        - name: ETCD_AUTO_TLS
          value: "true"
        {{- else if .Values.auth.client.secureTransport }}
        - name: ETCD_CERT_FILE
          value: "/opt/bitnami/etcd/certs/client/cert.pem"
        - name: ETCD_KEY_FILE
          value: "/opt/bitnami/etcd/certs/client/key.pem"
        {{- if .Values.auth.client.enableAuthentication }}
        - name: ETCD_CLIENT_CERT_AUTH
          value: "true"
        - name: ETCD_TRUSTED_CA_FILE
          value: "/opt/bitnami/etcd/certs/client/ca.crt"
        {{- end }}
        {{- end }}

        ## Peer-to-peer communication
        {{- if and .Values.auth.peer.secureTransport .Values.auth.peer.useAutoTLS }}
        - name: ETCD_PEER_AUTO_TLS
          value: "true"
        {{- else if .Values.auth.peer.secureTransport }}
        - name: ETCD_PEER_CERT_FILE
          value: "/opt/bitnami/etcd/certs/peer/cert.pem"
        - name: ETCD_PEER_KEY_FILE
          value: "/opt/bitnami/etcd/certs/peer/key.pem"
        {{- if .Values.auth.peer.enableAuthentication }}
        - name: ETCD_PEER_CLIENT_CERT_AUTH
          value: "true"
        - name: ETCD_PEER_TRUSTED_CA_FILE
          value: "/opt/bitnami/etcd/certs/peer/ca.crt"
        {{- end }}
        {{- end }}

        ports:
        - name: client
          containerPort: {{ .Values.service.port }}
        - name: peer
          containerPort: {{ .Values.service.port }}
        lifecycle:
          preStop:
            exec:
              command:
                - "/bin/sh"
                - "-ec"
                - |
                  AUTH_OPTIONS="{{ template "etcd.authOptions" . }}"
                  DATA_DIR={{ template "etcd.dataDir" . }}
                  MEMBER_ID=$(etcdctl member list | grep name=`hostname -s` | awk {'print $1'} | awk -F ":" {'print $1'})
                  export ETCDCTL_ENDPOINTS="{{ $etcdClientProtocol }}://{{ $etcdFullname }}-0.{{ $etcdHeadlessServiceName }}.{{ .Release.Namespace }}.svc.cluster.local:{{ $clientPort }}"
                  echo "==> Removing $MEMBER_ID from etcd cluster"
                  etcdctl ${AUTH_OPTIONS} member remove $MEMBER_ID
                  if [ $? -eq 0 ]; then
                      rm -rf ${DATA_DIR}/*
                  fi
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          tcpSocket:
            port: client
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          tcpSocket:
            port: client
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- end }}
        volumeMounts:
        {{- if .Values.persistence.enabled }}
        - name: data
          mountPath: /bitnami/etcd
        {{ end }}
        {{ if .Values.useConfigmap }}
        - name: etcd-config
          mountPath: /opt/bitnami/etcd/conf/
        {{ end }}
        {{ if or .Values.auth.client.enableAuthentication (and .Values.auth.client.secureTransport (not .Values.auth.client.useAutoTLS ) ) }}
        - name: etcd-client-certs
          mountPath: /opt/bitnami/etcd/certs/client/
          readOnly: true
        {{ end }}
        {{ if or .Values.auth.peer.enableAuthentication (and .Values.auth.peer.secureTransport (not .Values.auth.peer.useAutoTLS ) ) }}
        - name: etcd-peer-certs
          mountPath: /opt/bitnami/etcd/certs/peer/
          readOnly: true
        {{ end }}
      volumes:
      {{ if .Values.useConfigmap }}
      - name: etcd-config
        configMap:
          name: {{ template "etcd.fullname" . }}-configuration
      {{ end }}
      {{ if or .Values.auth.client.enableAuthentication (and .Values.auth.client.secureTransport (not .Values.auth.client.useAutoTLS ) ) }}
      - name: etcd-client-certs
        secret:
          secretName: {{ required "A secret containinig the client certificates is required" .Values.auth.client.existingSecret }}
          defaultMode: 256
      {{ end }}
      {{ if or .Values.auth.peer.enableAuthentication (and .Values.auth.peer.secureTransport (not .Values.auth.peer.useAutoTLS ) ) }}
      - name: etcd-peer-certs
        secret:
          secretName: {{ required "A secret containinig the peer certificates is required" .Values.auth.peer.existingSecret }}
          defaultMode: 256
      {{ end }}
{{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
        {{- range $key, $value := .Values.persistence.annotations }}
          {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
      {{- end }}
      {{- end }}
{{- else }}
      - name: data
        emptyDir: {}
{{- end }}


